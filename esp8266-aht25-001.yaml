esphome:
  name: esp8266-aht25-001

esp8266:
  board: esp01_1m

# Enable logging
logger:
  level: DEBUG

#api:
#  encryption:
#    key: !secret api_secret

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  #power_save_mode: none
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "AP ${node_name}"
    password: !secret wifi_ap_password

captive_portal:

mqtt:
  broker: "192.168.111.201"
  port: 1883
  username: "mqtt2"
  password: "mqtt2"
  birth_message:
  will_message:
  on_message:
    - topic: esp8266-aht25-001/ota_mode
      payload: 'ON'
      then:
        - deep_sleep.prevent: deep_sleep_1
    - topic: esp8266-aht25-001/sleep_mode
      payload: 'ON'
      then:
        - deep_sleep.enter: deep_sleep_1

deep_sleep:
  id: deep_sleep_1
  #run_duration: 10s
  sleep_duration: 5min

i2c:

sensor:
  - platform: adc
    pin: A0
#    attenuation: auto
    name: "VBatt"
    update_interval: 10s
    filters:
      - multiply: 1.96
    
  - platform: aht10
    temperature:
      name: "esp8266-aht25-001 Temperature"
      id: temp
    humidity:
      name: "esp8266-aht25-001 Humidity"
      id: rh
    update_interval: 10s

  - platform: template
    name: "esp8266-aht25-001 Absolute Humidity"
    unit_of_measurement: "g/m^3"
    lambda: |-
      const float mw = 18.01534;    // molar mass of water g/mol
      const float r = 8.31447215;   // Universal gas constant J/mol/K
      return (6.112 * powf(2.718281828, (17.67 * id(temp).state) /
        (id(temp).state + 243.5)) * id(rh).state * mw) /
        ((273.15 + id(temp).state) * r); // in grams/m^3
    accuracy_decimals: 2
    update_interval: 10s
